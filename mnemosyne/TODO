-factor out startup code in test
-cdata for deck name
-check if get_log_entries_to_sync_for really return iterator
-create new database on server side if needed
-self.stopped, timeouts
-synchroniser --> xml formatter?
-DictClass
-add error handling on send client history
-more elegant error handling
-check if count of log entries is OK, both on client and on server side
-sending length from server to client is different than from client to server
-repetition: don't send stuff we can calculate
-o_id sometimes none, don't sync then
-add modulo to progress dialogs
-more code sharing between client and server? Send history, e.g.
-add streaming connection to server side too.
-\r client / vs server?
-make sure the actual sync events get updated too
-rename history by log
-media
-get media file
-check for updated media files outside of the program
-document Event structure
-same connection throughout?
-sql roll back?
-conflict resolution
-benchmarks
-multiuser server, token?
-ui: pass or notImplemented?
-incremental elementree parsinc
-server can report can refuse large files
-extra data
-streaming compression
http://www.linuxtopia.org/online_books/programming_books/python_programming/python_ch33s08.html
http://www.dev-explorer.com/articles/using-python-httplib
-be sure to truncate time to int if it comes from other SRS systems
-make sure we do progressive parsing
-make sure active gets updated too
-activating cards
-make sure to convert int(time.time()) to integer
-make sure all events make it to the sync protocol + formats
-how to prevent different instantiations from uploading logs twice
-check if updated_card event without added card event works
-mechanism to have plugin settings synced?
-pull in user id on first sync
-make sure after import all sync events fire

I looked further into it, using BaseHTTPServer.

- the output stream of the server was unbuffered by default. buffering
it saves a bit of time, eg

        wfile = self.connection.makefile("wb", 4096)
        for chunk in generate_JSON(cards):
            wfile.write(chunk)

- looking at the source code of httplib (which urllib uses), it also
uses an unbuffered file by default. performance nearly as good as the
tcp server can be achieved by fetching the data in one go using
urlretrieve() and then iterating over the retrieved file, and the same
performance as the socket implementation can be achieved by using a
buffered file instead:

def parse_JSON(fileobj):
   import simplejson, time
   fp = os.fdopen(fileobj.fileno(), 'rb', -1)
   for data in fp:
      simplejson.loads(data) 


-current active set not marked upon entering


-empty tags
-convert default tags on import
-test case for hierarchy parsing ["a", "bye bye", "a::b", "a::c", "b::c::d"]:
-add update after import
-sync adding sets

-need component.statisticspages and configuration widgets?


-duplicates for fact speedup
>         """Return fact with the same 'unique_fields' data as 'fact'."""
>         
>         query = "select _id from facts where card_type_id=?"
>         args = (fact.card_type.id,)
>         if fact._id:
>             query += " and not _id=?"
>             args = (fact.card_type.id, fact._id)
>         duplicates = []            
>         for cursor in self.con.execute(query, args):
>             data = dict([(cursor2["key"], cursor2["value"]) for cursor2 in \
>                 self.con.execute("""select * from data_for_fact where
>                 _fact_id=?""", (cursor[0], ))])
>             for field in fact.card_type.unique_fields:
>                 if data[field] == fact[field]:
>                     duplicates.append(\
>                         self.get_fact(cursor[0], id_is_internal=True))
>                     break
>         return duplicates

-rework interface of database.py to include syncing events.


-id vs _id
-tag.id in criteria?
-is it worth keeping database.tag_names?
-get rid of 'get_'

-number of unmemorised cards to hold in your hand? (i.e. grade 0 + 1)
-rework give initial grade dialog

-time WM: history in same DB?

-more tests
-update_cards --> modify cards?

-windows: slots
-windows: upgrade config?
-windows: HOME

-card browser
-make sure searching for a single unicode character works
-qsortfilter proxy
-show number of cards selected
-card.in_view needed?
-make card browser remember its size

-do better numeric sort on card browser and activate cards


-implement duplicate checking
-explain check for duplicates after import of 1.x? Also give a hint of its working in
the GUI function itself?
-card preview
-MVC: http://doc.trolltech.com/qq/qq24-delegates.html


-don't auto vacuum? what for WM?
-more fine grained resource_limited

-delete 1.99 logs
-reenable upload

-do review_controller.rebuild_queue, reload counter after edit deck, clean duplicates

-new translation infrastructure
-handle deferred translation
-different translators for different users?

-import
-update data if same id present on import
-on import, activate plugins, created card types if necessary
-on import don't add cards for which card type is not present
-warn when not importing a duplicate card
-xml import tests (wcu, memaid, plconv)
-option to detect and mark inverses on import?
-update XML import/export to new database format
-warn when importing card type with duplicate id
-option to add tags on import
-save import dir
-make sure enter does not close the import dialog
-make sure we log new card creation on import
-make sure to detect media and do slash normalisation from importing text files
-'teacher mode' on export, which allows pupils to update previously imported
 cards, as opposed to adding new cards. Implemented through id's of the form
 T.<fixed card id for all pupils>.<pupil user id>?
-when resetting learning data on export, can we export facts only? Tags are on
 a per card basis.
-utf16?
-make sure all grades are shown on first revision of imported card. Adapt button group title

-tips (both on startup and on use): right click to add cards or sound, comma to 
 separate tag names, :: to separate hierarchies
-comment/tip about not having to do all your scheduled repetitions in
 one sitting
-upgrade docs on duplicate checking
-update tooltips, inform Patrick


-have hierarchy in plugin names

-test uploading of logs, also in rollover

-better mechanism to have different renderers

-see if graphical glitch is fixed with latest matplotlib version, reenable
 remember size

-make distrib

-check for related cards on same day could fail if minute level scheduler is used in the meantime
 (update comment in scheduler too)

-infrastructure to make it easier to type certain symbols

-mark cards plugin

-ampersand mnemonics everywhere

-partial implementation of type answer (none/all/special tag? Db Attribute? Button?)
-draw answer, make configurable by card type

-more plugin examples: file format, custom tag, activate all cards,
 last grade filter

-leech detection (mod 15)

-ask people about biggest gripe in Mnemosyne, things that did not behave as expected



-also add option to download source in the info box

-explain license on our website

-grep through TODO's in source code

-alt tabbing gives low res icon.

-modality of dialogs (mail by Nosai), Qt.WStyle_MinMax | Qt.WStyle_SysMenu))?

-allow edit current card and add card to be open at the same time?

-make file handling more robust, detect all errors (see mail by
 OldGrantonian)

-reenable datadir in setup.py

-make filters more efficients by using regex instead of loops.

-easier function to do tag detection in plugin

-bug in Qt: setting default colour to black does not register the colour clicks.

-document cntrl enter in edit dialog instead of clicking ok

pylint:
	find ./mnemosyne/libmnemosyne/ -name \*.py | while read f ; do echo $f;pylint $f 2>&1|grep ^E:; done

-Contributors: Konrad Wojas, Laurent Mauron, Ed Bartosh, Mike Appleby, Max Usachev

-Faq about how to pronounce Mnemosyne

-delete key shortcut for saved sets


* After 2.0:

-website redesign? like http://hanzim.com/download.php

-add days since last rep / until next rep to statistics

-don't activate plugins until after clicking ok

-respect font in fact editor

-card type with prefilled fields

-update ohloh?

-skritter/cpod interop mail

-better supermemo import

-get rid of mp3 clip prevention?

-plugin to store backups on dropbox

-detect wrong current date (last review in the future or way past)

-improve sphinxdocs: autoclass='both', document module members

-show latex errors in GUI?

-add media to a card but then abandonig/editing the card keeps the media in media directory
 (they are not referenced in the database, though)

-pythoscope? http://pypi.python.org/pypi/pythoscope/0.2.1
http://pythoscope.org/
-pyflakes?

-hover over extra hanzi information, hanzi statistics

-plugin for midi files

-chinese pod plugin

-"reschedule" cheating plugin

-improve learn ahead, by learing ahead per day and prioritising within each day


Windows Mobile client:

If your phone has a touchscreen use the pocket pc version. Otherwise try the smartphone version. 

-better way of making default actions visible? Call layout()?
-hook up scheduler rollover
-cramming widget, cache counters
-implement hide question
-icon
-more complete question box implementation
-installer
-set basedir in registry key
-install only pyc files
-mark card
-play around with MW5torage for easier sync and document this if it works.
-button color

Multiuser statistics analysis:

-break out card id stringss to a different table and use interger _id in the rest of
 the database to save space
-move times from a later start date to save space?
-investigate origin of ._ logs
-don't do card checks for post 2.0

-download media files when giving URL

-three sided export?

-synonym handling plugin?

-regular expression search?

-add 'add card' option to deck manager?

-active alert as plugin

-zooming picture instead of scrollbars?
 
-animated strokes: http://lost-theory.org/ocrat/

-congratulations screen

-language text based card types, with 'graduating' from word cards once they are learned enough,
 and only keeping sentence cards (mail by querido, scheduler feedback needed)

-scheduler with minute granularity?

-widget to create new card types. Makes sure the criteria updating code gets called.


* Miscellaneous:

-change file suffix when changing export format

-button after opening fact editor in edit deck to go to next card in the list

-sound recorder

-store _fact_ids_learned in config, such that they persist over sessions?

-auto identifying similar cards

-unify number shortcuts (with and without Ctrl)

-forward / backward when previewing cards in the database

-clean up interval when importing from txt

-paste from clipboard

-font and color comboboxes instead of dialogs in card appearance?

-preselect all in some text fields, so that the users can start typing
 immediately

-feedback about uploads in GUI / add time-out

-drag and drop of pictures, sound files

-autoupgrade, or at least notify of available upgrade (needs a separate thread)

-bundle docs

-undo last grade + keyboard shortcut. Disable undo after logs have been purged

-http://labs.trolltech.com/blogs/2009/03/12/wysiwyg-html-editor/

-integrate Mnemosyne analysis, advanced statistics, history,
 forgetting index, histogram of grades and intervals... (look at graphs
 in JMemorize)

-importing cards from rss feed

-clean obsolete latex images / autogenerate them

-investigate ridiculously large thinking times

-determine import / export file type based on suffix
 (i.e. remove file format field)? Probably not possible, as
 file dialogs only return filenames, not the chosen filter type.

-swac plugin, smart.fm

-corner case: If M > 0 and k < 0 then (a,b) is a local maximum
If M > 0 and k > 0 then (a,b) is a local minimum: eats < ... >

