-fix latex tests, improve coverage
-time latex check

-number of elements Ullrich

-separate filter chain for q and a on export

-just copy database on initial sync
-option not to download old history
-option purge history, refactor logging test
-add check in 'log_entries_to_sync' for missing entries
-cdata, encode for deck name, unicode + test
-option to skip backup before sync
-option to only save after every N repetitions

-test scheduled, active count sync on load/save + type

-self.stopped, timeouts
-more elegant error handling? Uniform naming error vs exception
-restore from backup, both client and server (factor out code from default controller)
-sql roll back?



-does loopback adress work?

-ui: pass or notImplemented?
-time saxutils.escape attr

-sync activity criteria
-sync card types (needed for clones)

-mechanism to prevent different instantiations from uploading logs twice
-store machine id in log_name too
-fix 'correct_config', log parser

-conflict resolution
-rather than deleting history, mark it as undone in order to keep id ordering
 consistent
-can we do triangular sync if internal log ids are different? Partnership index
 local or global?
-sync complete partnership status? local + global? or only enough to avoid/allow triple sync.

-create openSM2sync.database interface. Add comment on mediadir relative, / vs \ in filenames
-rework interface of database.py to include syncing events.
-document internal vs external card types
-update readme. Mention how clients should deal with update events of cards that were deleted
 later on. Mention that only final state is same, not intermediate states
-example 'miniclient' supporting sync
-log save event after import and sync in the default controller. Add tests

-hack tarfile to add progress bar?
-add modulo to progress dialogs

-rename media files-> external files?
-add tests with unicode in basedir
-mechanism to have plugin settings synced?
-exchange card types between different SRS, add support for card type events
-send across cards as pictures (see stubs in client.py and server.py). Add resolution to filename? (device rotation)

-integrate openSM2sync with GUI
-reload database after sync to create new card type clones
-server.open_database: create new database on server side if needed


-current active set not marked upon entering
-get_activity_criterion also returns default criterion. Make sure it is not used to construct the criteria list in the GUI

-empty tags
-convert default tags on import
-test case for hierarchy parsing ["a", "bye bye", "a::b", "a::c", "b::c::d"]:
-add update after import

-where to move txt_log_parser
-need component.statisticspages and configuration widgets?

-move ~/.mnemosyne to .config/mnemosyne as per freedesktop standard?
https://bugzilla.gnome.org/show_bug.cgi?id=518585

-post nose 0.11: add cover branches

-eliminate double save on finalise
-compression on backup to reduce write time to SD card?


-duplicates for fact speedup
>         """Return fact with the same 'unique_fields' data as 'fact'."""
>         
>         query = "select _id from facts where card_type_id=?"
>         args = (fact.card_type.id,)
>         if fact._id:
>             query += " and not _id=?"
>             args = (fact.card_type.id, fact._id)
>         duplicates = []            
>         for cursor in self.con.execute(query, args):
>             data = dict([(cursor2["key"], cursor2["value"]) for cursor2 in \
>                 self.con.execute("""select * from data_for_fact where
>                 _fact_id=?""", (cursor[0], ))])
>             for field in fact.card_type.unique_fields:
>                 if data[field] == fact[field]:
>                     duplicates.append(\
>                         self.get_fact(cursor[0], id_is_internal=True))
>                     break
>         return duplicates




-id vs _id
-tag.id in criteria?
-is it worth keeping database.tag_names?
-get rid of 'get_'

-number of unmemorised cards to hold in your hand? (i.e. grade 0 + 1)
-rework give initial grade dialog

-rework progress bar API

-more tests
-update_cards --> modify cards?

-windows: upgrade config?
-windows: HOME
-test unicode filenames in sync protocol


-card browser
-make sure searching for a single unicode character works
-qsortfilter proxy
-show number of cards selected
-card.in_view needed?
-make card browser remember its size

-time how long it takes to extract all media from a set of cards. If it takes too
 long, consider adding a media field to the fact table

-do better numeric sort on card browser and activate cards

-mobile client: even more agressive prefetch?


-implement duplicate checking
-confirmation dialog for deleted cards
-explain check for duplicates after import of 1.x? Also give a hint of its working in
the GUI function itself?
-card preview
-MVC: http://doc.trolltech.com/qq/qq24-delegates.html

-don't auto vacuum? what for WM?
-more fine grained resource_limited

-delete 1.99 logs
-reenable upload

-... after menu options that open a dialog
-suppress autorepeat on review dialog

-do review_controller.rebuild_queue, reload counter after edit deck, clean duplicates

-new translation infrastructure
-handle deferred translation
-different translators for different users?

-import
-update data if same id present on import
-on import, activate plugins, created card types if necessary
-on import don't add cards for which card type is not present
-warn when not importing a duplicate card
-xml import tests (wcu, memaid, plconv)
-rewrite test_mem_import test_sch to go through the controller
-option to detect and mark inverses on import?
-update XML import/export to new database format
-warn when importing card type with duplicate id
-option to add tags on import
-save import dir
-make sure after import all sync events fire
-make sure enter does not close the import dialog
-make sure we log new card creation on import
-make sure to detect media and do slash normalisation from importing text files
-utf16?
-make sure there is an error message to the user if xml import fails.
-mention Mnemosyne XML instead of XML
-make sure all grades are shown on first revision of imported card. Adapt button group title
-http://gitorious.org/hooq/hooq? Qt4 testing
 http://www.fredemmott.co.uk/blog/2010/01/18/Qt4%20GUI%20Testing%20with%20Hooq

-tips (both on startup and on use): right click to add cards or sound, comma to 
 separate tag names, :: to separate hierarchies
-comment/tip about not having to do all your scheduled repetitions in
 one sitting
-upgrade docs on duplicate checking
-update tooltips, inform Patrick
-tar file size estimate sometimes off by one record.

http://pysnippet.blogspot.com/2010/02/qtabwidget-hiding-bar.html
-have hierarchy in plugin names

-test uploading of logs, also in rollover

-better mechanism to have different renderers

-see if graphical glitch is fixed with latest matplotlib version, reenable
 remember size

-make distrib

-http://www.mblondel.org/journal/2008/08/01/web-canvas/

-check for related cards on same day could fail if minute level scheduler is used in the meantime
 (update comment in scheduler too)

-infrastructure to make it easier to type certain symbols

-mark cards plugin

-ampersand mnemonics everywhere

-partial implementation of type answer (none/all/special tag? Db Attribute? Button?)
-draw answer, make configurable by card type

-more plugin examples: file format, custom tag, activate all cards,
 last grade filter

-leech detection (mod 15)

-ask people about biggest gripe in Mnemosyne, things that did not behave as expected


-copy card and create a new one that way

-also add option to download source in the info box

-explain license on our website

-grep through TODO's in source code

-alt tabbing gives low res icon.

-modality of dialogs (mail by Nosai), Qt.WStyle_MinMax | Qt.WStyle_SysMenu))?

-allow edit current card and add card to be open at the same time?

-make file handling more robust, detect all errors (see mail by
 OldGrantonian)

-reenable datadir in setup.py

-make filters more efficients by using regex instead of loops.

-easier function to do tag detection in plugin

-bug in Qt: setting default colour to black does not register the colour clicks.

-document cntrl enter in edit dialog instead of clicking ok

pylint:
	find ./mnemosyne/libmnemosyne/ -name \*.py | while read f ; do echo $f;pylint $f 2>&1|grep ^E:; done

-Contributors: Konrad Wojas, Laurent Mauron, Ed Bartosh, Mike Appleby, Max Usachev

-Faq about how to pronounce Mnemosyne

-delete key shortcut for saved sets


* After 2.0:

-'shared deck' export
-is 'client_info["shared_dack"] the best way to signal this? Or have entirely new
 server API functions?
-make sure not send across learning data, e.g. by calling reset_learning_data on
 a copy in _log_entry() for card
-server.py
    def open_shared_database(self, database_name, username):

        """A shared database only contains log entries to specify the card
        contents, not the learning data. Make sure this is read-only for
        everybody except the original author. Can have side effects like
        listing the shared deck on a website, ... .

        """
-client.py

    def upload_shared_database(self):
        raise NotImplementedError

        # client_info["shared_deck"] = True
        # self.login(hostname, port, username, password)
        # self.put_client_log_entries()
        # self.put_client_media_files()
        # no self.get_sync_finish(), no partnership update.
    
        # Refactor put_client_log_entries to have arguments number_of_entries,
        # entries, where entries is an iterator that does not pass through the
        # log put rather only creates new cards and facts events.     
        # Ditto for media files.

        # An upload always overrides the previous one. The alternative would be
        # to have to generate artificial deletion events for cards which are
        # still in the original author's database, but which he no longer wants
        # to share.

    def download_shared_database(self):
        raise NotImplementedError
    
        # client_info["shared_deck"] = True
        # backup_file = self.database.backup()
        # self.login(hostname, port, username, password)
        # self.get_client_log_entries()
        # self.get_client_media_files()

        # download will never delete cards, even if they were in a previous
        # version of the shared deck. TODO: is this good or bad? If we do want
        # this, we do need to complicate the protocol and worry about creating
        # artificial deletion events?

-    def card_from_log_entry(self, log_entry):
        # When syncing from a shared deck, don't update repetition data, but do
        # update fact views, card types, tags. (TODO: think about changing card
        # types more carefully.) (TODO: make sure we don't override our own
        # existing tags.)
        # Note that shared cards do have the same id's across all users, this
        # will give extra info for the science server (but means that in this
        # case the science server will need to look at user_ids too to
        # differentiate the cards.
-    def apply_log_entry(self, log_entry):
        # When (re)downloading shared decks, there will be only ADDED_ events,
        # not UPDATED_events. Convert the former to the latter if the objects
        # were already in the database.
-make sure to enforce read-only, preferable through server itself, not through
 open_shared_database



-website redesign? like http://hanzim.com/download.php

-add days since last rep / until next rep to statistics

-don't activate plugins until after clicking ok

-respect font in fact editor

-card type with prefilled fields

-update ohloh?

-skritter/cpod interop mail

-better supermemo import

-get rid of mp3 clip prevention?

-plugin to store backups on dropbox

-detect wrong current date (last review in the future or way past)

-improve sphinxdocs: autoclass='both', document module members

-show latex errors in GUI?

-add media to a card but then abandonig/editing the card keeps the media in media directory
 (they are not referenced in the database, though)

-pythoscope? http://pypi.python.org/pypi/pythoscope/0.2.1
http://pythoscope.org/
-pyflakes?

-hover over extra hanzi information, hanzi statistics

-plugin for midi files

-chinese pod plugin

-"reschedule" cheating plugin

-improve learn ahead, by learing ahead per day and prioritising within each day

http://lost-theory.org/python/ltchinese/

-control B format character in supermemo import?

Windows Mobile client:

If your phone has a touchscreen use the pocket pc version. Otherwise try the smartphone version. 

-better way of making default actions visible? Call layout()?
-hook up scheduler rollover
-cramming widget, cache counters
-implement hide question
-icon
-more complete question box implementation
-installer
-set basedir in registry key
-install only pyc files
-mark card
-button color
-sonud: http://watersprite.awardspace.com/python/

Multiuser statistics analysis:

-break out card id stringss to a different table and use interger _id in the rest of
 the database to save space
-move times from a later start date to save space?
-investigate origin of ._ logs
-don't do card checks for post 2.0

-download media files when giving URL

-three sided export?

-synonym handling plugin?

-regular expression search?

-add 'add card' option to deck manager?

-active alert as plugin

-zooming picture instead of scrollbars?
 
-animated strokes: http://lost-theory.org/ocrat/

-congratulations screen

-language text based card types, with 'graduating' from word cards once they are learned enough,
 and only keeping sentence cards (mail by querido, scheduler feedback needed)

-scheduler with minute granularity?

-widget to create new card types. Makes sure the criteria updating code gets called.


* Miscellaneous:

-change file suffix when changing export format

-button after opening fact editor in edit deck to go to next card in the list

-sound recorder

-store _fact_ids_learned in config, such that they persist over sessions?

-auto identifying similar cards

-unify number shortcuts (with and without Ctrl)

-forward / backward when previewing cards in the database

-clean up interval when importing from txt

-paste from clipboard

-font and color comboboxes instead of dialogs in card appearance?

-preselect all in some text fields, so that the users can start typing
 immediately

-feedback about uploads in GUI / add time-out

-drag and drop of pictures, sound files

-autoupgrade, or at least notify of available upgrade (needs a separate thread)

-bundle docs

-undo last grade + keyboard shortcut. Disable undo after logs have been purged

-http://labs.trolltech.com/blogs/2009/03/12/wysiwyg-html-editor/

-integrate Mnemosyne analysis, advanced statistics, history,
 forgetting index, histogram of grades and intervals... (look at graphs
 in JMemorize)

-importing cards from rss feed

-clean obsolete latex images / autogenerate them

-investigate ridiculously large thinking times

-determine import / export file type based on suffix
 (i.e. remove file format field)? Probably not possible, as
 file dialogs only return filenames, not the chosen filter type.

-swac plugin, smart.fm

-corner case: If M > 0 and k < 0 then (a,b) is a local maximum
If M > 0 and k > 0 then (a,b) is a local minimum: eats < ... >

