-searching
-make sure searching for a single unicode character works
-auto search after timeout?
-filtering on tag and card type
-show number of cards per tag and cardtype?
-save column sizes
-save sort order
-right click menu options: edit, preview, delete, change card type, add tags, remove tags
-add controller logic for after editing/deleting a card in browse cards
-throwing an exception in browse cards does not release database

-do better numeric sort on card browser and activate cards, make sure 'untagged' shows up last

-add full html header to stardard renderer. Still need MW table hack?
-test and time renderer on MW. Need to cache it?
-test no_pregenerated_data on WM

-apply activity criterion after sync, for both partners + test
-sync to empty webserver (add 'database_is_empty' to server and act upon it)
-add support for error messages on protocol mismatch, expired credit
-add support for render chain selection

-larger interval for initial grade 5?

-media file handler
-don't do media check in database, but in controller?
-rename relative_paths to Media_paths
-create latex dir in filter plugin?
-delete orphaned media files. Do it in controller, not in database, so that it needs to 
 happen only once when batch deleting a set of cards.

-card formatting options on remote web server: act on config info that the client sent across
 Add hook in set_partner_info


-warn when creating a new database that this is not the recommended way to organise your cards.
-right click to add cards or sound, comma to separate tag names, :: to separate hierarchies
-document cntrl enter in edit dialog instead of clicking ok (also manual?)

-check for related cards on same day could fail if minute level scheduler is used in the meantime
 (update comment in scheduler too)


-test case for hierarchy parsing ["a", "bye bye", "a::b", "a::c", "b::c::d"]:


-go through all source
-communicate SQLite_no_pregerated_data, save interval, ..., repaint now to client writers
-do extra input checking in controller
-include coverage source option
-test on cramming counters

-do review_controller.rebuild_queue, reload counter after edit deck, clean duplicates

-delete 1.99 logs
-reenable upload
-remove hard coded dot_mnemosyne2 path in webserver
-turn off logging in webserver

-delay matplotlib instatiation
-profile startup/shutdown

-alpha 1


-make distrib

-add plugin example on card type specific renderer
-add doc on how to write plugin to sfinx doc

-Qt bug? different font size in edit box and in css

-windows: test auto upgrade
-windows: test unicode filenames in sync protocol
-test running from usb, update instructions
-add tests with unicode in data_dir

-more elaborate plugin description in bottom pane

-reenable datadir in setup.py

-Contributors: Konrad Wojas, Laurent Mauron, Ed Bartosh, Mike Appleby, Max Usachev, Ullrich Martini
 (also make sure they are on webpage)

-Faq about how to pronounce Mnemosyne
-check if online username is still free
-threading/multiprocess for sync and review servers? Threading prob. works automatically if persistent
 connections are supported (CherryPy), perhaps also for multiprocess. Multiprocess probably only useful
 to get round the GIL, which is only useful on a dedicated server.


-import
-update data if same id present on import
-on import, activate plugins, created card types if necessary
-on import don't add cards for which card type is not present
-warn when not importing a duplicate card
-covert to map type on import
-xml import tests (wcu, memaid, plconv)
-rewrite test_mem_import test_sch to go through the controller
-option to detect and mark inverses on import?
-update XML import/export to new database format
-make XML import tolerant to extra new lines in header
-warn when importing card type with duplicate id
-option to add tags on import
-mention that txt format does not have tag info?
-save import dir
-make sure after import all sync events fire
-make sure enter does not close the import dialog
-make sure we log new card creation on import
-make sure to detect media and do slash normalisation from importing text files
-utf16?
-make sure there is an error message to the user if xml import fails.
-mention Mnemosyne XML instead of XML

-http://gitorious.org/hooq/hooq? Qt4 testing
 http://www.fredemmott.co.uk/blog/2010/01/18/Qt4%20GUI%20Testing%20with%20Hooq

-deactive all tags, click on 1 tag: gives partial flag for that tag, not full tag, and is not counted
-better initial size of activate cards dialog. Autoresizing?
-Select saved set, switch tab to other criterion (deselects set) and switch back to original one.
 The set should then be autoselected again.
-being able to edit existing set, replace input box by combobox with old sets
-removing plugin with criterion should not happen if it is in use. 
-warn when syncing and the other criterion plugin is not present?
-make 'grade activity criterion' an official plugin? Add tests?

-hoop up dialogs in UDP

-implement duplicate checking
-confirmation dialog for deleted cards
-explain check for duplicates after import of 1.x? Also give a hint of its working in
the GUI function itself?
-card preview

-new translation infrastructure
-handle deferred translation
-different translators for different users?

-tips (both on startup and on use): right click to add cards or sound, comma to 
 separate tag names, :: to separate hierarchies
-comment/tip about not having to do all your scheduled repetitions in
 one sitting
-tip on selecting 'new database' to keep everything in one database
-upgrade docs on duplicate checking
-update tooltips, inform Patrick
-tar file size estimate sometimes off by one record.

-integrate webserver in GUI, login mechanism, session_token, cookies
-add webserver in testsuite, case when the database is empty
-make empty lines respect font size
-sound files suffer from connection reset by peer. Try other WSGI server?
-add html caching support for media files
-send absolute filenames when running server locally, so that we don't need to
 send them over http

-have hierarchy in plugin names

-auto vacuum after every N openings? What about WM?

-http://www.mblondel.org/journal/2008/08/01/web-canvas/

-infrastructure to make it easier to type certain symbols

-mark cards plugin

-move button group in review widget to designer code after pyqt upgrade. 
 Also possible in add cards?

-partial implementation of type answer (none/all/special tag? Db Attribute? Button?)
-draw answer, make configurable by card type

-more plugin examples: file format, custom tag, activate all cards,
 last grade filter

-leech detection (mod 15)

-ask people about biggest gripe in Mnemosyne, things that did not behave as expected

-copy card and create a new one that way

-also add option to download source in the info box

-explain license on our website

-grep through TODO's in source code

-alt tabbing gives low res icon.

-modality of dialogs (mail by Nosai), Qt.WStyle_MinMax | Qt.WStyle_SysMenu))?

-allow edit current card and add card to be open at the same time?

-make file handling more robust, detect all errors (see mail by
 OldGrantonian)

-make filters more efficients by using regex instead of loops.

-easier function to do tag detection in plugin

-document cntrl enter in edit dialog instead of clicking ok

pylint:
	find ./mnemosyne/libmnemosyne/ -name \*.py | while read f ; do echo $f;pylint $f 2>&1|grep ^E:; done

-Qt bug: insertAtTop on tags combobox in add_cards does not seem to work


* After 2.0:


-post nose 0.11: add cover branches

-matplotlib screen corruption, reenble resize?

-hack tarfile to add progress bar?
-compression on backup to reduce write time to SD card?

-'shared deck' export
-is 'client_info["shared_dack"] the best way to signal this? Or have entirely new
 server API functions?
-make sure not send across learning data, e.g. by calling reset_learning_data on
 a copy in _log_entry() for card
-server.py
    def open_shared_database(self, database_name, username):

        """A shared database only contains log entries to specify the card
        contents, not the learning data. Make sure this is read-only for
        everybody except the original author. Can have side effects like
        listing the shared deck on a website, ... .

        """
-client.py

    def upload_shared_database(self):
        raise NotImplementedError

        # client_info["shared_deck"] = True
        # self.login(hostname, port, username, password)
        # self.put_client_log_entries()
        # self.put_client_media_files()
        # no self.get_sync_finish(), no partnership update.
    
        # Refactor put_client_log_entries to have arguments number_of_entries,
        # entries, where entries is an iterator that does not pass through the
        # log put rather only creates new cards and facts events.     
        # Ditto for media files.

        # An upload always overrides the previous one. The alternative would be
        # to have to generate artificial deletion events for cards which are
        # still in the original author's database, but which he no longer wants
        # to share.

    def download_shared_database(self):
        raise NotImplementedError
    
        # client_info["shared_deck"] = True
        # backup_file = self.database.backup()
        # self.login(hostname, port, username, password)
        # self.get_client_log_entries()
        # self.get_client_media_files()

        # download will never delete cards, even if they were in a previous
        # version of the shared deck. TODO: is this good or bad? If we do want
        # this, we do need to complicate the protocol and worry about creating
        # artificial deletion events?

-    def card_from_log_entry(self, log_entry):
        # When syncing from a shared deck, don't update repetition data, but do
        # update fact views, card types, tags. (TODO: think about changing card
        # types more carefully.) (TODO: make sure we don't override our own
        # existing tags.)
        # Note that shared cards do have the same id's across all users, this
        # will give extra info for the science server (but means that in this
        # case the science server will need to look at user_ids too to
        # differentiate the cards.
-    def apply_log_entry(self, log_entry):
        # When (re)downloading shared decks, there will be only ADDED_ events,
        # not UPDATED_events. Convert the former to the latter if the objects
        # were already in the database.
-make sure to enforce read-only, preferable through server itself, not through
 open_shared_database
-if there are actual card based clients, remove pragma: no cover and test these as well

-try adding images to card browser.
http://developer.qt.nokia.com/faq/answer/how_can_i_add_a_non-resource_image_to_a_qtextdocument
using Qwebit http://stackoverflow.com/questions/3142132/how-to-use-a-qgraphicswebview is not
a good alternative, as it does not obey selection coloring
-ellisis in QTextDocument in card browser?
-rewrite card browser in C++, or at least delegate? In that case, move question and answer getting
 to data, and eliminate the text colors at selection using Qt.

-send across cards as pictures (see stubs in client.py and server.py). Add resolution to filename? (device rotation)
-Tim's gogorender plugin
-option purge history, refactor logging test. Should only happen in no other sync partners are
 interested in it

-website redesign? like http://hanzim.com/download.php

-add days since last rep / until next rep to statistics

-don't activate plugins until after clicking ok

-card type with prefilled fields

-update ohloh?

-synchronise history folder to guard against mobile clients not uploading their
 logs, even though they set upload_logs=True?

-skritter/cpod interop mail

-better supermemo import

-API for statusbar widgets

-get rid of mp3 clip prevention?

-media on dropbox?
-plugin to store backups on dropbox

-detect wrong current date (last review in the future or way past)

-improve sphinxdocs: autoclass='both', document module members

-show latex errors in GUI?
-adding latex cards on non-latex device currently requires 2 syncs with main server to
 show the images

-add media to a card but then abandonig/editing the card keeps the media in media directory
 (they are not referenced in the database, though)

-pythoscope? http://pypi.python.org/pypi/pythoscope/0.2.1
http://pythoscope.org/
-pyflakes?

-hover over extra hanzi information, hanzi statistics

-plugin for midi files

-chinese pod plugin

-"reschedule" cheating plugin

-improve learn ahead, by learing ahead per day and prioritising within each day

http://lost-theory.org/python/ltchinese/

-control B format character in supermemo import?


Windows Mobile client:

If your phone has a touchscreen use the pocket pc version. Otherwise try the smartphone version. 

-integrate sync
-repaint_now useful?
-better way of making default actions visible? Call layout()?
-hook up scheduler rollover
-document save after n rep
-cramming widget, cache counters
-implement hide question
-icon
-more complete question box implementation
-installer
-set basedir in registry key
-install only pyc files
-mark card
-button color
-sonud: http://watersprite.awardspace.com/python/


Multiuser statistics analysis:

-break out card id stringss to a different table and use interger _id in the rest of
 the database to save space
-move times from a later start date to save space?
-investigate origin of ._ logs
-don't do card checks for post 2.0

-download media files when giving URL

-three sided export?

-webserver: map card type does not really hide the question box, just blanks the question

-synonym handling plugin?

-regular expression search?

-add 'add card' option to deck manager?

-active alert as plugin

-zooming picture instead of scrollbars?
 
-animated strokes: http://lost-theory.org/ocrat/

-congratulations screen

-language text based card types, with 'graduating' from word cards once they are learned enough,
 and only keeping sentence cards (mail by querido, scheduler feedback needed)

-scheduler with minute granularity?

-widget to create new card types. Makes sure the criteria updating code gets called.


* Miscellaneous:

-change file suffix when changing export format

-button after opening fact editor in edit deck to go to next card in the list

-sound recorder

-store _fact_ids_learned in config, such that they persist over sessions?

-auto identifying similar cards

-unify number shortcuts (with and without Ctrl)

-forward / backward when previewing cards in the database

-clean up interval when importing from txt

-paste from clipboard

-font and color comboboxes instead of dialogs in card appearance?

-preselect all in some text fields, so that the users can start typing
 immediately

-feedback about uploads in GUI / add time-out

-drag and drop of pictures, sound files

-autoupgrade, or at least notify of available upgrade (needs a separate thread)

-bundle docs

-undo last grade + keyboard shortcut. Disable undo after logs have been purged

-http://labs.trolltech.com/blogs/2009/03/12/wysiwyg-html-editor/

-integrate Mnemosyne analysis, advanced statistics, history,
 forgetting index, histogram of grades and intervals... (look at graphs
 in JMemorize)

-research papers: http://act-r.psy.cmu.edu/people/index.php?id=11

-importing cards from rss feed

-clean obsolete latex images

-investigate ridiculously large thinking times

-determine import / export file type based on suffix
 (i.e. remove file format field)? Probably not possible, as
 file dialogs only return filenames, not the chosen filter type.

-swac plugin, smart.fm

-corner case: If M > 0 and k < 0 then (a,b) is a local maximum
If M > 0 and k > 0 then (a,b) is a local minimum: eats < ... >

