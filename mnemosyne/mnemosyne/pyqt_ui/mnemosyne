#!/usr/bin/python

#
# Mnemosyne <Peter.Bienstman@UGent.be>
#

import gettext
_ = gettext.gettext

import os
import sys

from optparse import OptionParser

from PyQt4.QtGui import QApplication

from mnemosyne.libmnemosyne import Mnemosyne

# Parse options.

parser = OptionParser()
parser.usage = "%prog [<database_file>]"
parser.add_option("-d", "--datadir", dest="datadir",
                  help=_("data directory"), default=None)
(options, args) = parser.parse_args()

# Check if we have to override the basedir determined in libmnemosyne,
# either because we explicitly specified a datadir on the command line,
# or because there is a .mnemosyne directory present in the current directory.
# The latter is handy when Mnemosyne is run from a USB key, so that there
# is no need to refer to a drive letter which can change from computer to
# computer.
if options.datadir != None:
    basedir = os.path.abspath(options.datadir)
elif os.path.exists(os.path.join(os.getcwdu(), ".mnemosyne")):
    basedir = os.path.abspath(os.path.join(os.getcwdu(), ".mnemosyne"))
else:
    basedir = os.path.abspath(os.path.join(os.environ['HOME'], ".mnemosyne"))
    
# Filename argument.
if len(args) > 0:
    filename = os.path.abspath(args[0])
else:
    filename = None

# Load the Mnemosyne library.
mnemosyne = Mnemosyne()

# Initialise GUI toolkit.
a = QApplication(sys.argv)
# TODO: install translator for Qt messages.
# Under Windows, move out of library.zip to get the true prefix.
# from mnemosyne.pyqt_ui.main_window import prefix
#if sys.platform == "win32":
#    prefix = os.path.split(prefix)[0]
#    prefix = os.path.split(prefix)[0]
#    prefix = os.path.split(prefix)[0]
#translator = QTranslator(a)
#translator.load("qt_" + loc + ".qm", os.path.join(prefix, 'locale'))
#a.installTranslator(translator)

# Add other components we need. The translator should obviously come first,
# and the UI components should come in the order they should be instantiated,
# but apart from that, the order does not matter.
mnemosyne.components.insert(0, ("mnemosyne.libmnemosyne.translator",
                             "GetTextTranslator"))
mnemosyne.components.append(("mnemosyne.pyqt_ui.main_window",
                             "MainWindow"))
mnemosyne.components.append(("mnemosyne.pyqt_ui.review_wdgt",
                             "ReviewWdgt"))
mnemosyne.components.append(("mnemosyne.pyqt_ui.sound",
                             "SoundPlayer"))
mnemosyne.extra_components_for_plugin["CrammingPlugin"] = \
                            [("mnemosyne.pyqt_ui.review_wdgt_cramming",
                             "ReviewWdgtCramming")]

# Run Mnemosyne.
mnemosyne.initialise(basedir=basedir, filename=filename)
mnemosyne.main_widget().show()
mnemosyne.main_widget().raise_() # Needed for OSX.
# TODO: check first run wizard.
#if config()["first_run"] == True:
#    w.productTour()
#    config()["first_run"] = False
#elif config()["show_daily_tips"] == True:
#    w.Tip()

a.exec_()
mnemosyne.finalise()
